秒杀系统限流策略:
总体思路:
    通过多个维度，一层一层的限流，最终只有少数人进入到付款页面，使得服务安全有效运行。
具体方案:
1.前端限流
    - 在通常情况下，用户会通过多此点击按钮来请求页面，其实这是没有意义的，所以我们可以在前端进行优化，让按钮只能点击一次，这样就减少了请求量。
    - 除此之外，在秒杀商品已经分发完毕，或者当前进入秒杀页面人过已经够多能够确保商品被秒杀后，之后进入的用户其实是没有意义的，故这里我们可以通过前端控制，当商品被抢光，和已近有很多人抢的时候，就关闭入口。
2.ip限流
    - 对于普通用户来说，前端的优化可以让不同用户不能多此访问，但是对于黄牛，或者程序员没有什么意义，故我们对于单个ip统计技术，如果已经访问过，那么对于之后的请求不予回应，或者回应缓存页面
3.验证码限流
    - 秒杀活动利器，每个人输入验证码的时间都是随机的，这使得原来的集中的流量，均匀的分散到一个时间段内，使得流量峰值下降，验证码虽然好我们需要进行优化，需要用redis对验证码进行相关缓存
4.ticket限流
    - 限流关键步骤了，虽然道理上来说，先付完钱的用户才算真正的抢到了这件商品，但是支付步骤相当复杂，而且设计到大量的事物处理，很有可能产生用户付款，但是在验证阶段，商品已经被抢光了，这样我们需要超卖/退款，两者都相当复杂，故我们使用ticket限流，即当用户抢到了ticket，那么这件商品已经被他锁定，当然只有真正走完支付流程，他才能拿到商品。这里ticket牵扯到高并发和同步问题，我们可以用mysql语句的原子解决。
5.ticket补充
    支付是有时限的，或者用户放弃资格，故可能用户拿到ticket，并没有支付，这多余的商品怎么解决呢？有两种解决方法：内部消化或者找时间放出来，此时流量高峰已过，也无需担心
